Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].

Return the answer in an array.

 

Example 1:

Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation: 
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.
For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).
Example 2:

Input: nums = [6,5,4,8]
Output: [2,1,0,3]
Example 3:

Input: nums = [7,7,7,7]
Output: [0,0,0,0]
 

Constraints:

2 <= nums.length <= 500
0 <= nums[i] <= 100


Solution:
class Solution(object):
    def smallerNumbersThanCurrent(self, nums):
        sortedNums = sorted(nums)
        dict = {}
        result = []
        #create data dictionary
        for i in range(len(sortedNums)):
            if sortedNums[i] not in dict:
                dict[sortedNums[i]] = i # give value as index
        
        for i in nums:  # compare with original nums and append index to result list
            result.append(dict[i])
        
        return result
        
 # build dict so that we can reference through & iterate through list of nums; given numbers with respective index
Inside of it, take each unique number as key and its position as value.
Each position represents how many numbers it is greater than.

Finally compare the original list with key of dict and output the index.

nums = [8, 1, 2, 2, 3]
sorted = [1,2,2,3,8]
dict = {1:0,2:1,3:3,8:4}
result = [4,0,1,1,3]
